#!/usr/bin/env python
from time import sleep, time, ctime
from fcntl import ioctl
import os
import subprocess
import re

VERSION = '0.1'

DISK_STATE_RE = re.compile(r'^ drive state is:(.+)')
OVERSLEEP_FACTOR = 3
BLKFLSBUF = 0x00001261 # <include/linux/fs.h>
MIN_FLUSH_PERIOD = 500 # in ms
PDFLUSH_PATH = '/proc/sys/vm/dirty_writeback_centisecs'
class PDFlush(object):
    _stopped = False

    def __init__(self):
        self._initial_interval = self.getInterval()

    def getInitialInterval(self):
        return self._initial_interval

    def start(self):
        print 'Enabling kernel flush daemon'
        self._setInterval(self._initial_interval)
        self._stopped = False

    def stop(self):
        print 'Disabling kernel flush daemon'
        delay = self.getInterval()
        if delay:
            self._stopped = True
            self._setInterval(0)

    @staticmethod
    def _setInterval(value):
        control = open(PDFLUSH_PATH, 'w')
        control.write('%i' % (value, ))
        control.flush()
        control.close()

    @staticmethod
    def getInterval():
        control = open(PDFLUSH_PATH)
        result = int(control.read())
        control.close()
        return result

    def __enter__(self):
        self.stop()

    def __exit__(self, exc_type, exc_value, traceback):
        self.start()

    def __del__(self):
        if self._stopped:
            self.start()

_disk_map = {}
def BlockDevice(disk):
    try:
        result = _disk_map[disk]
    except KeyError:
        _disk_map[disk] = result = _BlockDevice(disk)
    return result

class _BlockDevice(object):
    controlled = False
    next_spindown = None
    can_flush = True
    need_init = True

    def __init__(self, disk):
        self.disk = disk
        self._sys = sys = '/sys/block/' + disk
        self._stat = sys + '/stat'
        self._rotational = sys + '/queue/rotational'
        self._dev = '/dev/' + disk
        self._spinning = True
        self._last_read_stat = None
        self._last_write_stat = None
        self._dependent_block_device_list = []
        for path in (self._stat, self._rotational, self._dev):
            if not os.path.exists(path):
                raise Exception('Non-existant path %r' % (path, ))
        self.refreshDepList()

    def refreshDepList(self):
        deplist = self._dependent_block_device_list
        del deplist[:]
        slaves_path = self._sys + '/slaves'
        if os.path.exists(slaves_path):
            append = deplist.append
            for slave in os.listdir(slaves_path):
                state_path = self._sys + '/md/dev-' + slave + '/state'
                if os.path.exists(state_path) and open(state_path).read() == 'spare':
                    # Spare disks should not prevent us from flushing when
                    # they are spun down, as nothing will be written to them.
                    continue
                slave_path = os.path.realpath(slaves_path + '/' + slave)
                is_partition_path = slave_path + '/partition'
                if os.path.exists(is_partition_path):
                    slave_path = '/'.join(slave_path.split('/')[:-1])
                    assert not os.path.exists(slave_path + '/partition')
                append(BlockDevice(os.path.basename(slave_path)))

    def __repr__(self):
        prefix = '<%s(%s) at 0x%x' % (self.__class__.__name__, self.disk, id(self))
        if self._dependent_block_device_list:
            prefix += 'depends on ' + repr(self._dependent_block_device_list)
        return prefix + '>'

    @property
    def rotational(self):
	return int(open(self._rotational).read())

    @property
    def actual_device(self):
	return os.path.exists(self._sys + '/device')

    @property
    def spinning(self):
        if self._dependent_block_device_list:
            for dependency in self._dependent_block_device_list:
                if not dependency.spinning:
                    # If any dependent drive isn't spinning, consider us as not
                    # spinning, so we don't get flushed.
                    return False
            return True
        else:
            if self.rotational:
                hdparm = subprocess.Popen(['hdparm', '-C', self._dev],
                    stdout=subprocess.PIPE)
                hdparm.wait()
                output = hdparm.stdout.read()
                for line in output.splitlines():
                    matched = DISK_STATE_RE.match(line)
                    if matched:
                        spinning = matched.group(1).strip() not in (
                            'standby', 'sleeping')
                        break
                else:
                    print 'Warning: could not understand hdparm -C output. ' \
                        'Using internal state tracking.', 'Output was:', repr(
                            output)
                    spinning = self._spinning
            else:
                # Consider non-rotating disks as always spinning. Ie, never
                # delay flushes to SSDs.
                spinning = True
            self._spinning = spinning
            return spinning

    def getTargetSpin(self):
        return self._spinning

    def updateReadStats(self):
        if self._dependent_block_device_list:
            raise ValueError('Should only be called on raw devices')
        with open(self._stat) as statfile:
            rio, _, rblk, _, wio, _, wblk, _, _, _, _ = [
                int(x.strip()) for x in statfile.read().split()
            ]
        read_stat = (rio, rblk)
        write_stat = (wio, wblk)
        read_happened = read_stat != self._last_read_stat
        write_happened = write_stat != self._last_write_stat
        self._last_read_stat = read_stat
        self._last_write_stat = write_stat
        if read_happened or write_happened:
            self._spinning = True
        return read_happened, write_happened

    def spinDown(self):
        if self._dependent_block_device_list:
            raise ValueError('Should only be called on raw devices')
        self.flush()
        success = not self.updateReadStats()[0]
        if success:
            os.system('hdparm -qy ' + self._dev)
            self._spinning = False
        return success

    def flush(self):
        try:
            device = open(self._dev)
        except IOError, exc:
            if exc.errno != 123: # no medium found
                raise
        else:
            ioctl(device.fileno(), BLKFLSBUF)
            device.close()

def main(disk_list, noflush_list, default_timeout):
    flusher = PDFlush()
    sync_period = max(flusher.getInitialInterval(), MIN_FLUSH_PERIOD) / 100.
    if disk_list:
        isControlled = lambda x: x.disk in disk_list
    else:
        isControlled = lambda x: x.actual_device and x.rotational
    with flusher:
        while True:
            # Refresh device list on every iteration, so we don't risk forgetting
            # a flush
            complete_device_list = [BlockDevice(x) for x in os.listdir('/sys/block')]
            for bdev in complete_device_list:
                if bdev.need_init:
                    bdev.need_init = False
                    bdev.controlled = isControlled(bdev)
                    if bdev.disk in noflush_list:
                        bdev.can_flush = False
            now = time()
            next_spindown = now + default_timeout
            for disk in complete_device_list:
                disk.refreshDepList()
                if disk.controlled:
                    target_spin = disk.getTargetSpin()
                    spinning = disk.spinning
                    read_happened, write_happened = disk.updateReadStats()
                    if spinning:
                        if disk.can_flush:
                            disk.flush()
                        if read_happened or not target_spin:
                            # Read happened or spun up (sync), schedule next
                            # spindown.
                            disk.next_spindown = next_spindown
                            if not target_spin:
                                print ctime(), 'spin up', disk.disk
                        if disk.next_spindown <= now:
                            print ctime(), 'spindown', disk.disk
                            if not disk.spinDown():
                                print '...failed, rescheduling'
                                disk.next_spindown = next_spindown
            for disk in complete_device_list:
                if not disk.controlled and disk.can_flush:
                    if disk.spinning:
                        disk.flush()
            while True:
                sleep(sync_period)
                new_now = time()
                if new_now < now + sync_period * OVERSLEEP_FACTOR:
                    break
                # We overslept ! Maybe host got suspended. Or it is overloaded.
                # In any case, delay next flush.
                now = new_now

if __name__ == '__main__':
    from argparse import ArgumentParser
    parser = ArgumentParser()
    parser.add_argument(
        'device', nargs='*',
        help='Block device spin to control. Actual basename (eg: "sda") only.'
            'Defaults to all rotational physical disks.',
    )
    parser.add_argument(
        '-s', '--spindown', default=300, type=float,
        help='Default timeout for spindown in seconds (default: %(default)s)',
    )
    parser.add_argument(
        '-n', '--noflush', action='append', default=[],
        help='Block devices to never flush (DANGER: in absence of fsync '
            'after data changes, data will be lost on system crash)',
    )
    args = parser.parse_args()
    try:
        main(
            disk_list=args.device,
            noflush_list=args.noflush,
            default_timeout=args.spindown,
        )
    except KeyboardInterrupt:
        pass
